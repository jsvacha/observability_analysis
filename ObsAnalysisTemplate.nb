(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     63662,       1252]
NotebookOptionsPosition[     15149,        372]
NotebookOutlinePosition[     61468,       1226]
CellTagsIndexPosition[     61425,       1223]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 StyleBox[
  RowBox[{"Observability", "  ", "Analysis", "  ", "Template"}], 
  "Title"]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.857760206972104*^9, 3.8577602268509517`*^9}, {
  3.867000474574087*^9, 
  3.8670004841124563`*^9}},ExpressionUUID->"2b308678-3604-43aa-ae10-\
741b584ac491"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Remove", "[", "\"\<Global`*\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.857761581235461*^9, 3.857761582211755*^9}, {
   3.857761928218252*^9, 3.8577619847168756`*^9}, 3.857788470988606*^9},
 CellLabel->
  "In[2482]:=",ExpressionUUID->"38b72558-f8d6-4a2d-bbec-e5e7273bebce"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["User-Defined Variables", "Section"]], "Section",
 CellChangeTimes->{{3.857792069917987*^9, 3.857792086477813*^9}, {
  3.857792147959855*^9, 3.857792159234144*^9}, {3.8577935840461483`*^9, 
  3.8577935969011183`*^9}, {3.857794320595767*^9, 3.857794322307343*^9}, {
  3.8669997431938953`*^9, 
  3.866999755721271*^9}},ExpressionUUID->"d3692466-f00a-4be7-9fa2-\
58614f963091"],

Cell["Define variables to assist with analysis here", "Text",
 CellChangeTimes->{{3.86700411074722*^9, 3.867004122307548*^9}, {
  3.8670045907266912`*^9, 
  3.867004595931055*^9}},ExpressionUUID->"43d3e415-b373-4787-a2a8-\
2ffac0f32d76"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observability Analysis", "Section",
 CellChangeTimes->{{3.866999833750265*^9, 3.866999836162888*^9}, {
  3.866999890527474*^9, 3.866999891121808*^9}, {3.867000396540119*^9, 
  3.867000399440076*^9}},ExpressionUUID->"c960d5d2-54f9-4bdb-8c53-\
09ff4c6dd3c6"],

Cell[TextData[StyleBox["System Definition (User Defined)", "Subsubsection"]], \
"Text",
 CellChangeTimes->{{3.866999833750265*^9, 3.866999836162888*^9}, {
  3.866999890527474*^9, 3.866999891121808*^9}, {3.867000687774873*^9, 
  3.867000690325183*^9}, {3.8670008446957493`*^9, 
  3.867000854686139*^9}},ExpressionUUID->"b7c64a15-36cb-4936-ab47-\
31f5a2acc9bb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"statevec", "=", 
   RowBox[{"{", 
    RowBox[{"v", ",", "k"}], "}"}]}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "state", " ", "vector", " ", "here"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.866999911679509*^9, 3.866999923097756*^9}, 
   3.867000031003233*^9, 3.867000085701687*^9, {3.867000694961228*^9, 
   3.8670006992815313`*^9}, {3.867004132396029*^9, 3.8670041328041353`*^9}, 
   3.86700422826579*^9, {3.867004263338258*^9, 3.867004266658218*^9}, {
   3.867004478799767*^9, 3.867004482514771*^9}},
 CellLabel->
  "In[2483]:=",ExpressionUUID->"161b6327-6277-442b-a7ab-f431494c093f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"inputvec", "=", 
   RowBox[{"{", "a", "}"}]}], ";", 
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "input", " ", "vector", " ", "here"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.857792699297677*^9, 3.8577927054333277`*^9}, {
   3.866999788614802*^9, 3.866999802587315*^9}, 3.866999845029114*^9, 
   3.867000016560775*^9, {3.8670007024485893`*^9, 3.867000706098385*^9}, {
   3.8670015478811083`*^9, 3.8670015651953497`*^9}, {3.8670021878484373`*^9, 
   3.867002210324353*^9}, {3.8670041357139463`*^9, 3.867004137166994*^9}, 
   3.867004225536677*^9, {3.8670042708717012`*^9, 3.8670042771802464`*^9}},
 CellLabel->
  "In[2484]:=",ExpressionUUID->"521a2934-287d-408a-a547-cd62970d6d68"],

Cell[BoxData[
 RowBox[{
  RowBox[{"outputvec", "=", 
   RowBox[{"{", 
    RowBox[{"k", "*", "v"}], "}"}]}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Define", " ", "output", " ", "vector", " ", "here", " ", "in", " ", 
    "terms", " ", "of", " ", "states", " ", "and", " ", "inputs"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.8578557114521427`*^9, 3.8578557235448017`*^9}, {
   3.857855784376595*^9, 3.8578559197436657`*^9}, {3.8583683449650784`*^9, 
   3.858368366634989*^9}, {3.858368861200038*^9, 3.8583688615946836`*^9}, {
   3.858370193314104*^9, 3.858370194254755*^9}, {3.858371029059291*^9, 
   3.8583710390520678`*^9}, {3.866999993332439*^9, 3.86699999475638*^9}, {
   3.867000642605274*^9, 3.867000657038066*^9}, {3.867004143115171*^9, 
   3.867004143319043*^9}, 3.867004220816371*^9, {3.867004281232595*^9, 
   3.8670042821760693`*^9}, {3.867004489888912*^9, 3.867004492549535*^9}},
 CellLabel->
  "In[2485]:=",ExpressionUUID->"84beffc6-4c4b-4405-9e0c-70f0a129e411"],

Cell[BoxData[
 RowBox[{
  RowBox[{"vecfield", "=", 
   RowBox[{"{", 
    RowBox[{"a", ",", "0"}], "}"}]}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Define", " ", "vector", " ", "field", " ", "here"}], " ", 
   "*)"}]}]], "Input",
 CellChangeTimes->{{3.8578549929019003`*^9, 3.857855033338434*^9}, {
   3.8583682429363947`*^9, 3.8583682542319403`*^9}, {3.858368291149247*^9, 
   3.858368298100379*^9}, {3.867000090599835*^9, 3.867000091990059*^9}, {
   3.867000721652998*^9, 3.867000725844079*^9}, {3.867004149428616*^9, 
   3.867004149628437*^9}, 3.867004217922574*^9, {3.867004285889604*^9, 
   3.867004286111744*^9}, {3.867004501082259*^9, 3.867004515730856*^9}},
 CellLabel->
  "In[2486]:=",ExpressionUUID->"7283ffaa-2beb-477e-aa18-097d4ed181e4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lieseq", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "0", "}"}], ",", 
     RowBox[{"{", "1", "}"}]}], "}"}]}], ";", " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Which", " ", "Lie", " ", "derivatives", " ", "to", " ", 
    RowBox[{"take", ".", " ", "Empty"}], " ", "set", " ", "is", " ", "the", 
    " ", "output", " ", "function", " ", "itself"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.858369085481155*^9, 3.858369121715797*^9}, {
   3.8583693773467407`*^9, 3.858369383487494*^9}, 3.8583694530385227`*^9, {
   3.8583699574005337`*^9, 3.858369968305492*^9}, {3.85837009091819*^9, 
   3.858370094556326*^9}, {3.8583715104639273`*^9, 3.858371510933118*^9}, {
   3.858371658631997*^9, 3.8583716592799797`*^9}, {3.8583717402547283`*^9, 
   3.8583717572459297`*^9}, {3.858371791610064*^9, 3.8583717930437727`*^9}, {
   3.867000826516206*^9, 3.867000866197996*^9}, {3.8670041562009068`*^9, 
   3.867004213779434*^9}, {3.867004291170104*^9, 3.867004314400408*^9}, {
   3.867004428229884*^9, 3.867004429111272*^9}},
 CellLabel->
  "In[2487]:=",ExpressionUUID->"1f88d0ad-08fc-4533-abee-adeeb25c66f6"],

Cell[TextData[StyleBox["Automated Analysis", "Subsubsection"]], "Text",
 CellChangeTimes->{{3.866999833750265*^9, 3.866999836162888*^9}, {
  3.866999890527474*^9, 3.866999891121808*^9}, {3.867000687774873*^9, 
  3.867000690325183*^9}, {3.867000749774502*^9, 
  3.867000789038171*^9}},ExpressionUUID->"c4a37193-9f30-4da8-99f9-\
a04a51fa0b66"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rule0", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"inputvec", "[", 
       RowBox[{"[", "i", "]"}], "]"}], "->", "0"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "inputvec", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8670018852884073`*^9, 3.8670019202711363`*^9}, 
   3.867002045042115*^9, 3.867002218613721*^9, {3.867002505487557*^9, 
   3.867002506644843*^9}, 3.8670025945332212`*^9},
 CellLabel->
  "In[2488]:=",ExpressionUUID->"17a3e2b9-868d-4969-882e-ee208194bcdf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"vecfield0", "=", 
   RowBox[{"vecfield", "/.", "rule0"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.867003859471212*^9, 3.867003874604765*^9}},
 CellLabel->
  "In[2489]:=",ExpressionUUID->"632fda03-ccec-4d49-b1a0-df1008f789f1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rules", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"inputvec", "[", 
         RowBox[{"[", "j", "]"}], "]"}], "->", 
        RowBox[{"KroneckerDelta", "[", 
         RowBox[{"i", ",", "j"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", 
         RowBox[{"Length", "[", "inputvec", "]"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "inputvec", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8670019534840937`*^9, 3.8670020480012074`*^9}, 
   3.867002220049691*^9, {3.867002500069784*^9, 3.867002501798456*^9}, {
   3.8670025614659367`*^9, 3.8670025654894657`*^9}, 3.86700259579496*^9},
 CellLabel->
  "In[2490]:=",ExpressionUUID->"e66e8673-db00-4767-8e46-7cc477c29e69"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cavecfields", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"vecfield", "-", "vecfield0"}], "/.", 
      RowBox[{"rules", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "inputvec", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.867000878024225*^9, 3.867000910430612*^9}, {
   3.8670009764430647`*^9, 3.867000989111466*^9}, {3.867001020222377*^9, 
   3.867001087714942*^9}, {3.867001154741754*^9, 3.867001204665612*^9}, {
   3.867001250803542*^9, 3.867001311829443*^9}, {3.8670013529395514`*^9, 
   3.86700136812969*^9}, {3.867001632701479*^9, 3.867001714270548*^9}, {
   3.867002269277337*^9, 3.867002334776029*^9}, {3.867002371640764*^9, 
   3.867002415962069*^9}, {3.867002461513464*^9, 3.867002461804837*^9}, 
   3.867002605760519*^9, 3.8670026664822206`*^9, {3.867003893897324*^9, 
   3.867003930984621*^9}, 3.8670039748591957`*^9, {3.867004328723596*^9, 
   3.867004339077692*^9}},
 CellLabel->
  "In[2491]:=",ExpressionUUID->"23ca38a2-125c-4e9d-a320-765c81d62d3b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"vecfields", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", "vecfield0", "}"}], ",", "cavecfields"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.867003944643764*^9, 3.867003962192892*^9}, 
   3.867004346900888*^9, 3.867004552512645*^9},
 CellLabel->
  "In[2492]:=",ExpressionUUID->"c8182a45-bb5b-4604-a36c-f0f573cb982a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LieIterate", "[", 
    RowBox[{"h_", ",", "i_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Grad", "[", 
     RowBox[{"h", ",", "statevec"}], "]"}], ".", 
    RowBox[{"vecfields", "[", 
     RowBox[{"[", 
      RowBox[{"i", "+", "1"}], "]"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.858370694051918*^9, 3.8583707717937603`*^9}, {
   3.858370924461882*^9, 3.858370933477372*^9}, {3.8583709684603*^9, 
   3.8583709827849607`*^9}, 3.858371231559536*^9, {3.867000011462678*^9, 
   3.867000012362355*^9}, {3.867000183579576*^9, 3.8670001989601603`*^9}, {
   3.8670039800777597`*^9, 3.867003981312199*^9}},
 CellLabel->
  "In[2493]:=",ExpressionUUID->"023c0288-11f0-461a-ac4c-7a648fde8fb4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"LieDerivative", "[", 
    RowBox[{"h_", ",", "seq_"}], "]"}], ":=", 
   RowBox[{"Fold", "[", 
    RowBox[{"LieIterate", ",", "h", ",", "seq"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.858370199002461*^9, 3.858370290694448*^9}, {
  3.858370325977517*^9, 3.858370484051387*^9}, {3.858370523871601*^9, 
  3.8583706226072893`*^9}, {3.858370790279188*^9, 3.8583707917611437`*^9}, {
  3.858370853343783*^9, 3.8583708878805943`*^9}, {3.858370937112349*^9, 
  3.8583709374667883`*^9}, {3.858370988342589*^9, 3.858371006210103*^9}},
 CellLabel->
  "In[2494]:=",ExpressionUUID->"ba090ca9-70b9-4fff-888f-2014de4d1e66"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lies", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"LieDerivative", "[", 
      RowBox[{"outputvec", ",", 
       RowBox[{"lieseq", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "[", "lieseq", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.858369151398221*^9, 3.858369153835546*^9}, {
   3.8583692600762033`*^9, 3.85836931097908*^9}, {3.858369345408002*^9, 
   3.858369361868637*^9}, {3.858369398605341*^9, 3.858369450049843*^9}, {
   3.8583695239609613`*^9, 3.858369554130866*^9}, {3.858369779500404*^9, 
   3.858369929600534*^9}, {3.858369978595498*^9, 3.858369985012974*^9}, {
   3.8583700239907293`*^9, 3.858370024270218*^9}, {3.858371280870678*^9, 
   3.858371336447896*^9}, {3.858371582171386*^9, 3.858371582624586*^9}, {
   3.866999999560652*^9, 3.867000001824382*^9}, 3.867000308184389*^9, {
   3.867002616189268*^9, 3.867002620333054*^9}, {3.867004397898878*^9, 
   3.867004403114687*^9}},
 CellLabel->
  "In[2495]:=",ExpressionUUID->"66ffd9f0-f9c1-41c8-a3e7-b21609ebc59e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"obsvec", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{"Flatten", "[", "lies", "]"}], ",", "0"}], "]"}]}], ";", 
  RowBox[{"MatrixForm", "[", "obsvec", "]"}]}]], "Input",
 CellChangeTimes->{{3.858371600324891*^9, 3.8583716369404173`*^9}, 
   3.8670009224022083`*^9, {3.867004373024466*^9, 3.867004381488009*^9}, 
   3.8670045652896976`*^9, {3.867004724035385*^9, 3.867004734079205*^9}},
 CellLabel->
  "In[2496]:=",ExpressionUUID->"6f40dcf7-50f4-4c59-bfa7-009471f79619"],

Cell[BoxData[
 RowBox[{
  RowBox[{"obsmat", "=", 
   RowBox[{"Simplify", "[", 
    RowBox[{"Grad", "[", 
     RowBox[{"obsvec", ",", "statevec"}], "]"}], "]"}]}], ";", 
  RowBox[{"MatrixForm", "[", "obsmat", "]"}]}]], "Input",
 CellChangeTimes->{{3.857856539793783*^9, 3.857856557081381*^9}, {
   3.8578569320652313`*^9, 3.8578569483156137`*^9}, {3.866999976482554*^9, 
   3.8669999784650106`*^9}, {3.86700013654547*^9, 3.8670001577633*^9}, 
   3.867000933482087*^9, {3.867002633201047*^9, 3.867002641964204*^9}, {
   3.867003992573123*^9, 3.8670040083396683`*^9}, 3.86700424011375*^9},
 CellLabel->
  "In[2497]:=",ExpressionUUID->"975b9bf8-2216-4700-a1dc-3feb4f509ac5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"unobssubspace", "=", 
   RowBox[{"NullSpace", "[", "obsmat", "]"}]}], ";", 
  RowBox[{"MatrixForm", "[", "unobssubspace", "]"}]}]], "Input",
 CellChangeTimes->{{3.867004013931185*^9, 3.867004041214768*^9}, 
   3.867004574569043*^9, {3.8670046309385433`*^9, 3.867004662163125*^9}, 
   3.867004741669159*^9},
 CellLabel->
  "In[2498]:=",ExpressionUUID->"5fab7b67-210e-4cea-ab02-ac1afd43e909"],

Cell[BoxData[
 RowBox[{"isobservable", "=", 
  RowBox[{
   RowBox[{"MatrixRank", "[", "obsmat", "]"}], "==", 
   RowBox[{"Length", "[", "statevec", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8578567286674023`*^9, 3.857856732916836*^9}, {
  3.857857088963273*^9, 3.857857095620955*^9}, {3.866999953736189*^9, 
  3.866999955029666*^9}, {3.86700262375004*^9, 3.867002626131885*^9}},
 CellLabel->
  "In[2499]:=",ExpressionUUID->"ac601703-d0c3-4070-ad20-205b3b5a673b"]
}, Open  ]]
},
WindowToolbars->"EditBar",
WindowSize->{1389, 762},
WindowMargins->{{0, Automatic}, {0, Automatic}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[(
            CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{
            CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
Magnification:>1.3 Inherited,
FrontEndVersion->"13.0 for Linux x86 (64-bit) (February 4, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2431da89-f354-4c99-93ba-3065877ef7aa"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 312, 8, 91, "Input",ExpressionUUID->"2b308678-3604-43aa-ae10-741b584ac491",
 Evaluatable->False],
Cell[873, 30, 316, 6, 54, "Input",ExpressionUUID->"38b72558-f8d6-4a2d-bbec-e5e7273bebce"],
Cell[CellGroupData[{
Cell[1214, 40, 397, 6, 87, "Section",ExpressionUUID->"d3692466-f00a-4be7-9fa2-58614f963091"],
Cell[1614, 48, 237, 4, 45, "Text",ExpressionUUID->"43d3e415-b373-4787-a2a8-2ffac0f32d76"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1888, 57, 262, 4, 87, "Section",ExpressionUUID->"c960d5d2-54f9-4bdb-8c53-09ff4c6dd3c6"],
Cell[2153, 63, 359, 6, 50, "Text",ExpressionUUID->"b7c64a15-36cb-4936-ab47-31f5a2acc9bb"],
Cell[2515, 71, 652, 14, 54, "Input",ExpressionUUID->"161b6327-6277-442b-a7ab-f431494c093f"],
Cell[3170, 87, 731, 14, 54, "Input",ExpressionUUID->"521a2934-287d-408a-a547-cd62970d6d68"],
Cell[3904, 103, 995, 19, 54, "Input",ExpressionUUID->"84beffc6-4c4b-4405-9e0c-70f0a129e411"],
Cell[4902, 124, 753, 15, 54, "Input",ExpressionUUID->"7283ffaa-2beb-477e-aa18-097d4ed181e4"],
Cell[5658, 141, 1171, 22, 54, "Input",ExpressionUUID->"1f88d0ad-08fc-4533-abee-adeeb25c66f6"],
Cell[6832, 165, 341, 5, 50, "Text",ExpressionUUID->"c4a37193-9f30-4da8-99f9-a04a51fa0b66"],
Cell[7176, 172, 610, 16, 54, "Input",ExpressionUUID->"17a3e2b9-868d-4969-882e-ee208194bcdf"],
Cell[7789, 190, 261, 6, 54, "Input",ExpressionUUID->"632fda03-ccec-4d49-b1a0-df1008f789f1"],
Cell[8053, 198, 894, 23, 54, "Input",ExpressionUUID->"e66e8673-db00-4767-8e46-7cc477c29e69"],
Cell[8950, 223, 1144, 24, 54, "Input",ExpressionUUID->"23ca38a2-125c-4e9d-a320-765c81d62d3b"],
Cell[10097, 249, 377, 10, 54, "Input",ExpressionUUID->"c8182a45-bb5b-4604-a36c-f0f573cb982a"],
Cell[10477, 261, 738, 17, 54, "Input",ExpressionUUID->"023c0288-11f0-461a-ac4c-7a648fde8fb4"],
Cell[11218, 280, 662, 13, 54, "Input",ExpressionUUID->"ba090ca9-70b9-4fff-888f-2014de4d1e66"],
Cell[11883, 295, 1157, 24, 54, "Input",ExpressionUUID->"66ffd9f0-f9c1-41c8-a3e7-b21609ebc59e"],
Cell[13043, 321, 523, 11, 54, "Input",ExpressionUUID->"6f40dcf7-50f4-4c59-bfa7-009471f79619"],
Cell[13569, 334, 670, 13, 54, "Input",ExpressionUUID->"975b9bf8-2216-4700-a1dc-3feb4f509ac5"],
Cell[14242, 349, 425, 9, 54, "Input",ExpressionUUID->"5fab7b67-210e-4cea-ab02-ac1afd43e909"],
Cell[14670, 360, 463, 9, 54, "Input",ExpressionUUID->"ac601703-d0c3-4070-ad20-205b3b5a673b"]
}, Open  ]]
}
]
*)

